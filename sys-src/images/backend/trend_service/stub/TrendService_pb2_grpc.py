# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import TrendService_pb2 as TrendService__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import objects_pb2 as objects__pb2


class TrendProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OnNewTrends = channel.unary_stream(
                '/twitterdash.TrendProvider/OnNewTrends',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=objects__pb2.TrendProviderReply.FromString,
                )


class TrendProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OnNewTrends(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrendProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OnNewTrends': grpc.unary_stream_rpc_method_handler(
                    servicer.OnNewTrends,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=objects__pb2.TrendProviderReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twitterdash.TrendProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TrendProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OnNewTrends(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/twitterdash.TrendProvider/OnNewTrends',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            objects__pb2.TrendProviderReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TweetCountsProviderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecentTweetCounts = channel.unary_unary(
                '/twitterdash.TweetCountsProvider/GetRecentTweetCounts',
                request_serializer=TrendService__pb2.GetRecentTweetCountsRequest.SerializeToString,
                response_deserializer=TrendService__pb2.GetRecentTweetCountsReply.FromString,
                )


class TweetCountsProviderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetRecentTweetCounts(self, request, context):
        """https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TweetCountsProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecentTweetCounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentTweetCounts,
                    request_deserializer=TrendService__pb2.GetRecentTweetCountsRequest.FromString,
                    response_serializer=TrendService__pb2.GetRecentTweetCountsReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'twitterdash.TweetCountsProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TweetCountsProvider(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetRecentTweetCounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/twitterdash.TweetCountsProvider/GetRecentTweetCounts',
            TrendService__pb2.GetRecentTweetCountsRequest.SerializeToString,
            TrendService__pb2.GetRecentTweetCountsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
