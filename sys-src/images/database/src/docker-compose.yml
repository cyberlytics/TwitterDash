version: '3.8'
services:
  # Lokale Datenbank - MongoDB
  database:
    container_name: mongo
    image: mongo:latest
    volumes:
      - ./images/database/data/MongoDB:/data/db
    ports:
      - '27017:27017'
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - DBNetwork
  
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      - DBNetwork

  database-service:
    image: ${DOCKER_REGISTRY-}databaseservice
    build:
      context: .
      dockerfile: database-service/Dockerfile


    networks:
        - DBNetwork
        - network-backend
        - network-frontend

    environment:
      MONGODB_IP: mongoDB

networks:
  network-backend:
    name: backend
    driver: bridge
  network-frontend:
    name: frontend
    driver: bridge
  DBNetwork:
    driver: bridge

  # # Frontend (Node.js)
  # node-frontend:
  #   build: './images/frontend/'
  #   volumes:
  #     - ./images/frontend/:/home/app/
  #     - /home/app/node_modules
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #     - BACKEND_SERVER=node-backend
  #     - BACKEND_PORT=5000
  #   networks:
  #     - network-frontend
  #   depends_on:
  #     - database-service
  
  # python:
  #   container_name: python
  #   build: ./<path>
  #   restart: unless-stopped

  # dotnet:
  #   container_name: dotnet
  #   build: ./<path>
  #   restart: unless-stopped

  # frontend:
  #   container_name: frontend
  #   build: .
  #   restart: unless-stopped
  #   ports:
  #     - "8080:80"

